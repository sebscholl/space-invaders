
{{#> pageScripts }}
<script type="text/javascript" charset="utf-8" async defer>
    
    function vect2str(v) {
      return v.x + ' ' + v.y + ' ' + v.z;
    }

    AFRAME.registerComponent('trash', {
      tick: function() {
        this.el.parentNode.removeChild(this.el);
      }
    });

    AFRAME.registerComponent('counter', {
      schema: { 
        count: { type: 'number' },
        text: { type: 'string' }
      },
      add: function(number) {
        this.data.count += number;
        this.render();
      },
      set: function(number) {
        this.data.count = number;
        this.render();
      },
      render: function() {
        this.el.setAttribute('value', `${this.data.text}: ${this.data.count}`);
      }
    });

    AFRAME.registerComponent('level', {
      schema: {
        level: { type: 'number' }
      },
      init: function() {
        this.defineHoard(this.data.level);
      },
      play: function() {
        this.spawn(this.data.hoard);
      },
      defineHoard: function(level) {
        this.data.hoard = (level + 1) * 3;
      },
      spawn: function(hoard) {
        var scene = this.el;
        var invaders = 0;
        var interval = setInterval(function () {

          var invader = document.createElement("a-entity");
          invader.setAttribute('position', '0 0 -500');
          invader.setAttribute('static-body', true);
          invader.setAttribute('invader', true);
          invader.setAttribute('gltf-model', '#invader');
          
          scene.appendChild(invader);

           if (++invaders == hoard) {
               window.clearInterval(interval);
           }
        }, 1000);
      },
      tick: function() {
        if (this.data.hoard == 0) {
          this.el.removeAttribute('level');;
          this.el.components['game-master'].nextLevel();
        }
      }
    });

    AFRAME.registerComponent('game-master', {
      schema: {
        mode: { type: 'string' },
        level: { type: 'number' },
        score: { type: 'number' },
        lives: { type: 'number' }
      },
      init: function() {
        this.levelCounter = document.getElementById('levelCounter');
        this.livesCounter = document.getElementById('livesCounter');
        this.scoreCounter = document.getElementById('scoreCounter');
      },
      menu: function(evt) {

      },
      newGame: function(evt) {
        this.data.mode = 'play';
        this.livesCounter.components['counter'].set(this.data.lives);
        this.nextLevel(this.data.level + 1);
      },
      nextLevel: function(level) {
        if (this.data.mode == 'play') {
          // Increment the game level
          ++this.data.level;
          // Set the Level on the game screen
          this.levelCounter.components['counter'].set(this.data.level);
          // Show "LEVEL X" message
          var text = document.createElement("a-text");
          text.setAttribute('value', 'LEVEL ' + this.data.level);
          text.setAttribute('position', '0 0 -3');
          text.setAttribute('mixin', 'vt323');
          text.setAttribute('scale', '3 3');
          // Add text element to DOM
          this.el.appendChild(text);

          function beginAttack(evt) {
            text.setAttribute('trash', true);
            this.el.setAttribute('level', `level:${this.data.level}`);
          };

          setTimeout(beginAttack.bind(this), 3000);
        }
      },
      gameOver: function(evt) {
        this.data.mode = "stop";

        this.el.removeAttribute('level');

        document.querySelectorAll('[invader]').forEach(
          function(invader) {
            invader.components['invader'].die.bind(invader)();
          }
        );

        setTimeout(this.showEndScreen.bind(this), 1000);
      },
      scorePoint: function() {
        this.data.score++
        this.scoreCounter.components['counter'].set(this.data.score);

      },
      dockLife: function(evt) {
        this.livesCounter.components['counter'].set(--this.data.lives);
        if (this.data.lives <= 0) this.gameOver();
      },
      showEndScreen: function() {
        var text = document.createElement("a-text");
        text.setAttribute('value', 'GAME OVER\nSCORE ' + this.data.score);
        text.setAttribute('position', '0 0 -3');
        text.setAttribute('mixin', 'vt323');
        text.setAttribute('scale', '3 3');

        this.el.appendChild(text);  
      },
      tick: function() {

      }
    });

    AFRAME.registerComponent('beam', {
      init: function() {
        this.data.aliveFor = 0;
        this.el.addEventListener('collide', this.score);
      },
      play: function(evt) {
        var r = document.querySelector('[camera]').getAttribute('rotation');

        this.el.body.velocity.set(-r.y, r.x, 0);

        this.el.body.applyImpulse(
          new CANNON.Vec3(0, 0, -250), 
          new CANNON.Vec3(0, 0, 0)
        );
      },
      score: function() {
        this.dataset.hit = true;
        this.sceneEl.components['game-master'].scorePoint();
      },
      tick: function() {
        if (this.data.aliveFor == 180 || this.el.dataset.hit) {
          this.el.parentNode.removeChild(this.el);
        } else {
          this.data.aliveFor += 1;
        }
      }
    });

    AFRAME.registerComponent('invader', {
      init: function() {
        this.el.addEventListener('collide', this.die); 
      },
      play: function() {
        this.el.setAttribute('alongpath', `curve: #track${Math.floor((Math.random() * 8) + 1)}; dur: 10000;`);
        this.el.addEventListener('movingended', this.hit);
      },     
      tick: function() {
        if (this.el.dataset.dead) {
          // Remove the invader from the DOM
          this.el.parentNode.removeChild(this.el);
          // Mark the hoard as down 1 on the level master
          if (document.querySelector('[level]')) {
            document.querySelector('[level]').components.level.data.hoard -= 1;
          }
        }
      },
      hit: function() {
        this.sceneEl.components['game-master'].dockLife();
        this.dataset.dead = true;
      },
      die: function() {
        var invader = this;
  
        invader.removeAttribute('alongpath');

        var pos = invader.getAttribute('position');
        
        var base = Math.floor(Math.random()*100) + 400;
        var x = base * (Math.floor(Math.random()*2) == 1 ? 1 : -1);
        var y = base * (Math.floor(Math.random()*2) == 1 ? 1 : -1);

        var death = document.createElement("a-animation");
        death.setAttribute('attribute', 'position');
        death.setAttribute('from', vect2str(pos));
        death.setAttribute('to', `${x} ${y} -1000`);
        death.setAttribute('dur', '1000');

        var spin = document.createElement("a-animation");
        spin.setAttribute('attribute', 'rotation');
        spin.setAttribute('to', '360 360 360');
        spin.setAttribute('fill', 'forwards');
        spin.setAttribute('repeat', 3);
        spin.setAttribute('dur', '300');

        function vanishInvader(evt) {
          this.dataset.dead = true;
        }

        death.addEventListener('animationend', vanishInvader.bind(invader));

        invader.appendChild(spin);
        invader.appendChild(death);
      }
    });

</script>
{{/pageScripts}}

<a-scene id="scene" game-master="mode:menu;level:0;score:0;lives:5;" physics="debug:false; gravity: 0 0 0" fog="type: exponential; color: #000">

  <a-assets>
    <a-asset-item id="invader" 
                  src="models/invader.gltf">              
    </a-asset-item>

    <a-asset-item id="ship" 
                  src="models/cartoon_spaceship/scene.gltf">              
    </a-asset-item>

    <img id="sky" 
         src="https://vignette.wikia.nocookie.net/steamtradingcards/images/3/3d/Orbital_Gear_Background_Orbital_Gear_Space.jpg/revision/latest?cb=20140828180848"
         preload="true">

    <a-mixin id="vt323" 
             text="align:center;font:https://raw.githubusercontent.com/etiennepinchon/aframe-fonts/master/fonts/vt323/VT323-Regular.json;shader:msdf;">          
    </a-mixin>

    <a-mixin id="metal" material="src:url(images/riveted-metal.jpg); color: #696969; roughness: 1; metalness: 0.5"></a-mixin>
    
    <a-mixin id="music" 
             sound="src:url(audio/intro-menu-music.wav);autoplay:true;loop:true;"
             preload="auto"></a-mixin>

    <a-mixin id="laser" 
             sound="src:url(audio/laser-shot.wav);autoplay:true;" 
             material="src:url(images/green-metal.jpg);color:#5CE83C;metalness:1;emissive:#5CE83C;emissiveIntensity:0.75;"
             preload="auto"></a-mixin>
  </a-assets>

  <a-entity position="0 10 -10" light="type:point; color: #FFF; groundColor: #3C3; intensity: 1"></a-entity>

  <a-sky color="#ECECEC" 
         src="#sky"
></a-sky>

  <a-camera look-controls position="0 0 0" wasd-controls-enabled="false">
    <a-cursor material="color:red;">
      <a-cylinder mixin="metal" id="cannon2" position="-1.5 -0.5 0" rotation="90 0 0" radius="0.25" height="3" color="#FFC65D">
        <a-cylinder mixin="metal" radius="0.3" height="0.5" color="#FFC65D"></a-cylinder> 
        <a-cylinder mixin="metal" radius="0.275" height="0.5" color="#FFC65D" position="0 -1.25 0"></a-cylinder> 
      </a-cylinder>
      <a-cylinder mixin="metal" id="cannon1" position="1.5 -0.5 0" rotation="90 0 0" radius="0.25" height="3" color="#FFC65D">
        <a-cylinder mixin="metal" radius="0.3" height="0.5" color="#FFC65D"></a-cylinder>
        <a-cylinder mixin="metal" radius="0.275" height="0.5" color="#FFC65D" position="0 -1.25 0"></a-cylinder>
      </a-cylinder>
    </a-cursor>
  </a-camera>

  <a-curve id="track1">
      <a-curve-point position="-100 100 -500"></a-curve-point>
      <a-curve-point position="-200 100 -400"></a-curve-point>
      <a-curve-point position="-200 -100 -300"></a-curve-point>
      <a-curve-point position="0 1 -2"></a-curve-point>
  </a-curve>

  <a-curve id="track2">
      <a-curve-point position="100 100 -500"></a-curve-point>
      <a-curve-point position="200 100 -400"></a-curve-point>
      <a-curve-point position="200 -100 -300"></a-curve-point>
      <a-curve-point position="0 1 -2"></a-curve-point>
  </a-curve>

  <a-curve id="track3">
      <a-curve-point position="-100 -100 -500"></a-curve-point>
      <a-curve-point position="-200 100 -400"></a-curve-point>
      <a-curve-point position="-200 100 -300"></a-curve-point>
      <a-curve-point position="0 1 -2"></a-curve-point>
  </a-curve>

  <a-curve id="track4">
      <a-curve-point position="100 -100 -500"></a-curve-point>
      <a-curve-point position="200 100 -400"></a-curve-point>
      <a-curve-point position="200 100 -300"></a-curve-point>
      <a-curve-point position="0 1 -2"></a-curve-point>
  </a-curve>

  <a-curve id="track5">
      <a-curve-point position="300 0 -500"></a-curve-point>
      <a-curve-point position="300 -100 -350"></a-curve-point>
      <a-curve-point position="200 -100 -200"></a-curve-point>
      <a-curve-point position="-200 -100 -150"></a-curve-point>
      <a-curve-point position="3 1 -2"></a-curve-point>
  </a-curve>

  <a-curve id="track6">
      <a-curve-point position="-300 0 -500"></a-curve-point>
      <a-curve-point position="-300 -100 -350"></a-curve-point>
      <a-curve-point position="-200 -100 -200"></a-curve-point>
      <a-curve-point position="200 -100 -150"></a-curve-point>
      <a-curve-point position="-3 1 -2"></a-curve-point>
  </a-curve>

  <a-curve id="track7">
      <a-curve-point position="300 0 -500"></a-curve-point>
      <a-curve-point position="300 100 -350"></a-curve-point>
      <a-curve-point position="200 100 -200"></a-curve-point>
      <a-curve-point position="-200 100 -150"></a-curve-point>
      <a-curve-point position="3 1 -2"></a-curve-point>
  </a-curve>

  <a-curve id="track8">
      <a-curve-point position="-300 0 -500"></a-curve-point>
      <a-curve-point position="-300 100 -350"></a-curve-point>
      <a-curve-point position="-200 100 -200"></a-curve-point>
      <a-curve-point position="200 100 -150"></a-curve-point>
      <a-curve-point position="-3 1 -2"></a-curve-point>
  </a-curve>

  <a-text id="scoreCounter"
          value="SCORE: 0"
          mixin="vt323"
          color="#5CE83C"
          rotation="-45 45 0"
          position="-1.3 -1.5 -0.75"
          counter="count:0;text:SCORE;">
          <a-plane height="0.35" width="1.5" position="0 0.175 0" opacity="0.5"></a-plane>   
  </a-text>

  <a-text id="levelCounter"
          value="LEVEL: 0"
          mixin="vt323"
          color="#5CE83C"
          rotation="-45 0 0"
          position="0 -1.5 -1.25"
          counter="count:0;text:LEVEL;">
          <a-plane height="0.35" width="1.5" position="0 0.175 0" opacity="0.5"></a-plane>   
  </a-text>

  <a-text id="livesCounter"
          value="LIVES: 0"
          mixin="vt323"
          color="#5CE83C"
          rotation="-45 -45 0"
          position="1.3 -1.5 -0.75"
          counter="count:0;text:LIVES;">
          <a-plane height="0.35" width="1.5" position="0 0.175 0" opacity="0.5"></a-plane>   
  </a-text>

  <a-entity id="menu" position="0 0 -5">
    <a-text value="SPACE"
            mixin="vt323"
            scale="5 5"
            position="0 0.5 0">        
    </a-text>
    <a-text value="INVADERS"
            mixin="vt323"
            scale="3 3"
            color="#5CE83C"
            position="0 0 0">        
    </a-text>

    <a-text value="START"
            mixin="vt323"
            scale="3 3"
            color="#5CE83C"
            position="0 -1 0">  
            <a-box start-button width="1" height="0.3" depth="0.1" position="0 0.147 -0.5" color="grey" static-body></a-box>     
    </a-text>
  </a-entity>

  <!-- Draw the Curve -->
<!--     <a-draw-curve curveref="#track1" material="shader: line; color: blue;"></a-draw-curve>
  <a-draw-curve curveref="#track2" material="shader: line; color: blue;"></a-draw-curve>
  <a-draw-curve curveref="#track3" material="shader: line; color: green;"></a-draw-curve>
  <a-draw-curve curveref="#track4" material="shader: line; color: green;"></a-draw-curve>
  <a-draw-curve curveref="#track5" material="shader: line; color: orange;"></a-draw-curve>
  <a-draw-curve curveref="#track6" material="shader: line; color: orange;"></a-draw-curve>
  <a-draw-curve curveref="#track7" material="shader: line; color: red;"></a-draw-curve>
  <a-draw-curve curveref="#track8" material="shader: line; color: red;"></a-draw-curve> -->

  <a-entity gltf-model="#ship" 
            position="2.201 -8.009 -1.106"
            rotation="-0.723 41.804 22.399"
            scale="3 3 3"
            mixin="music"
            static-body>
  </a-entity>
</a-scene>

<script type="text/javascript" charset="utf-8" async defer>
  (function(){
    var camera  = document.querySelector('[camera]');
    var scene   = document.getElementById('scene');
    var cannon1 = document.querySelector('#cannon1');
    var cannon2 = document.querySelector('#cannon2');

    function makeBeam(cannon) {
      var position = cannon.getAttribute('position');
      // Physical Beam
      var beam = document.createElement("a-sphere");
      beam.setAttribute('position', '0 -1 0');
      beam.setAttribute('dynamic-body', true);
      beam.setAttribute('beam', true);
      beam.setAttribute('mixin', 'laser');
      beam.setAttribute('color', 'crimson');
      beam.setAttribute('radius', '0.24');
      beam.setAttribute('mixin', 'laser');
      
      return beam;
    } 
    
    function fire(cannon) {
      cannon.appendChild(makeBeam(cannon));
    }

    function shootGun(evt) {
      if (evt.code == "KeyS") fire(cannon1);
      if (evt.code == "KeyA") fire(cannon2);
    };

    var master = document.querySelector('[game-master]');

    document.querySelector('[start-button]').addEventListener('collide', function() {
      document.querySelector('#menu').setAttribute('trash', true);
      master.components["game-master"].newGame();
    });

    document.addEventListener('keypress', shootGun); 
  })();
</script>